(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{441:function(t,a,r){"use strict";r.r(a);var v=r(36),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"oauth-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oauth-2"}},[t._v("#")]),t._v(" OAuth 2")]),t._v(" "),r("p",[t._v("API를 통해 특정 시스템의 보호된 자원에 접근하기 위해서는 해당 시스템의 사용자 인증 정보(아이디, 패스워드)를 알고 있어야 합니다. 시스템 차원에서 다른 시스템의 보호된 자원에 접근하기 위해 그 시스템의 사용자 인증 정보를 관리하고 이 정보를 사용하는 것은 보안상 많은 문제들을 유발할 수 있습니다. 이런 문제들이 발생하지 않도록 API 접근을 위임하여 인증을 처리하는 방법을 사용할 수 있습니다.")]),t._v(" "),r("p",[t._v("많은 서비스 제공자(Google, Yahoo, AOL 등)들이 이런 인증 방식을 별도로 구현하여 사용하였습니다. 이렇게 구현된 결과들은 서로 조금씩 다르고 서로 호환되지 않았는데 이를 통일하기 위해 OAuth 1.0 표준안을 만들었습니다.")]),t._v(" "),r("p",[t._v("OAuth 1.0 발표 이후 몇 년 동안 사용하면서 커뮤니티는 아래와 같은 단점들에 대해 고민하였고 그 결과 OAuth 2(이후 ‘OAuth’로 명명)를 표준으로 정리하였습니다.")]),t._v(" "),r("h2",{attrs:{id:"oauth-1-0의-특징"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oauth-1-0의-특징"}},[t._v("#")]),t._v(" OAuth 1.0의 특징")]),t._v(" "),r("p",[t._v("기존의 다른 인증방식(OpenID)과 구분되는 특징은 크게 두 가지입니다.")]),t._v(" "),r("ol",[r("li",[t._v("API 인증 시, 써드파티 어플리케이션에게 사용자의 비번을 노출하지 않고 인증할 수 있다는 점")]),t._v(" "),r("li",[t._v("인증(Authentication)과 API 권한(Authorization) 부여를 동시에 할 수 있다는 점")])]),t._v(" "),r("h2",{attrs:{id:"oauth-1-0-동작원리"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oauth-1-0-동작원리"}},[t._v("#")]),t._v(" OAuth 1.0 동작원리")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://i.stack.imgur.com/UmvA7.png",alt:""}})]),t._v(" "),r("h2",{attrs:{id:"oauth-2-0"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oauth-2-0"}},[t._v("#")]),t._v(" OAuth 2.0")]),t._v(" "),r("h3",{attrs:{id:"개선된-부분"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#개선된-부분"}},[t._v("#")]),t._v(" 개선된 부분")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("용어변경 :")]),t._v(" "),r("ul",[r("li",[t._v("Resource Owner : 사용자")]),t._v(" "),r("li",[t._v("Resource Server : API 서버")]),t._v(" "),r("li",[t._v("Authorization Server : 인증서버 (API 서버와 같을 수도 있음)")]),t._v(" "),r("li",[t._v("Client : 써드파티 어플리케이션")])])]),t._v(" "),r("li",[r("p",[t._v("간단하다 :")]),t._v(" "),r("p",[t._v("OAuth 1.0에서는 https 가 필수가 아니었기 때문에 API를 호출할 때 signature를 생성해서 호출해야 했습니다.\n때문에 OAuth 1.0 API를 테스트 하려면 curl등을 사용하기 힘들고 별도의 API 콘솔등을 사용해서 테스트 해야 했습니다.")]),t._v(" "),r("p",[t._v("OAuth 2.0의 Bearer 토큰 인증 방식을 쓰면 더 이상 signature 가 필요 없기 때문에 API를 테스트하거나 예제를 만들 때 간단하게 개발할 수 있게 되었습니다.")])]),t._v(" "),r("li",[r("p",[t._v("대형 서비스로의 확장성 지원 :")]),t._v(" "),r("ul",[r("li",[t._v("커다란 서비스는 인증 서버를 분리하거나 다중화 할 수 있어야 합니다.")]),t._v(" "),r("li",[t._v("Authorization Server의 역할을 명확히 하여 이에 대한 고려가 되었습니다.")])])]),t._v(" "),r("li",[r("p",[t._v("더 많은 인증 방법 지원 :")]),t._v(" "),r("ul",[r("li",[t._v("이전에는 HMAC을 이용한 암호화 인증만 지원했습니다.")]),t._v(" "),r("li",[t._v("OAuth 2.0은 여러 인증 방식을 통해 웹 & 모바일 등 다양한 시나리오에 대응 가능합니다.")]),t._v(" "),r("li",[t._v("Access Token의 Life-time을 지정하여 만료일 설정 가능합니다.")])])])]),t._v(" "),r("h2",{attrs:{id:"oauth-2-0-동작원리"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oauth-2-0-동작원리"}},[t._v("#")]),t._v(" OAuth 2.0 동작원리")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://i.stack.imgur.com/Xn4c0.png",alt:""}})]),t._v(" "),r("h3",{attrs:{id:"참조"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#참조"}},[t._v("#")]),t._v(" 참조")]),t._v(" "),r("ul",[r("li",[t._v("http://d2.naver.com/helloworld/24942")]),t._v(" "),r("li",[t._v("http://earlybird.kr/1584")]),t._v(" "),r("li",[t._v("http://bcho.tistory.com/942")]),t._v(" "),r("li",[t._v("https://stackoverflow.com/questions/4113934/how-is-oauth-2-different-from-oauth-1")]),t._v(" "),r("li",[t._v("http://www.nextree.co.kr/oauth-2reul-iyonghan-sso-hwangyeong-gucug-1-2/")])])])}),[],!1,null,null,null);a.default=_.exports}}]);